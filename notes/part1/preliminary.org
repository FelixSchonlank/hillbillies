Made with Emacs Org Mode. Minor changes might disrupt Org's work flow

* Unit

** Position 							  :Defensive:

- Stored as doubles
- Getters and setters must be made
- Always within bounds (50x50x50 game world)


** Name 							  :Defensive:

- Can change (mutable)
- Prerequisites
  - >= 2 letters long
  - Only letters, quotes, and spaces


** Attributes 							      :Total:

- Attributes
  - Weight (wgh)
    - Always >= (strength + agility) / 2
  - Strength (str)
  - Agility (agl)
  - Toughness (tgh)
- Integers ∈ [1;200]
- Initially ∈ [25;100]


** HP & stamina 						    :Nominal:

- Maximum = round-up of 200 * weight/100 * toughness/100
- Integers (presumably)
- Always ∈ [0;maximum]


** Orientation 							      :Total:

- Floating point numbers (floats)
- In *radians*
- Getter and setter must be made


** Time advancing 						  :Defensive:

No formal documentation needed! Thank God.

- Implement method advanceTime which updates position and activity status,
  based on current position and current activity status.
  - Takes a float holding seconds that have past since last advanceTime
  call. Will always be >= 0, and must be < 0.2 (throw error if not the case).


** Basic movement

- Function moveToAdjacent that moves to the middle of an adjacent cube (within
  bounds).
  - Only interrupted when attacked (not on subsequent call or anything else).
- Speed
  - Base speed is determined as 1.5 * (str + agl) / (2 * wgh)
  - Walking speed is
    - 0.5 base speed when ascending (z-)
    - 1.0 base speed when remaining on same level (z=)
    - 1.2 base speed when descending (z+)
  - Sprinting
    - Brings speed to 2 * walkingSpeed
    - Costs 1 stamina per 0.1 seconds
    - Only allowed to start when stamina > 0
    - Stops at stamina == 0
- Orientation is set to atan2(v_y, v_x)

Implement functions moveToAdjacent, startSprinting, stopSprinting,
getMovementStatus.


** Less basic movement

- Function moveTo to move towards target cube (not necessarily adjacent)
- Can be interrupted by other stuff (retargeting, work), but path shall be
  resumed once interrupting activity has been finished.
- Recalling the moveTo function will change target location.


** Work

- Function work that will set the unit to work for 500/str seconds.
- Use floating point numebrs for duration and elapsed time.
- Can be interrupted by a new task, fighting, or resting.


** Fighting

*** Dodging

Unit will always first try to dodge an attack. Chance of succes is equal to
0.20 * agl_def / agl_att. If succesful, Unit suffers no damage and will be
teleported to random adjacent (not the same) cube within game world. If not,
Unit will try to block.


*** Blocking

Succes chance: 0.25 * (agl_def + str_def) / (agl_att + str_att). If succesful,
Unit suffers no damage. If not succesful, Unit does suffer damage.


*** Damage

Damage taken is equal str_att/10.


*** Orientation

Fighting Units must face each other
- θ_att = atan2(y_def - y_att, x_def - x_att)
- θ_def = atan2(y_att - y_def, x_att - x_def)


** Resting

- Function rest to initiate resting
- Will automatically happen every three minutes
- First restore tgh/200 HP per 0.2 seconds until full, then tgh/100 stamina.
- Initial period
  - Takes as long as it takes to restore 1 HP.
  - Only interruptatble by being attacked.
- Normal period
  - Takes as long as it needs to restore all HP and stamina.
  - Interruptable by anything.


** Default behaviour

The default behaviour may be switched on and off with startDefaultBehaviour and
stopDefaultBehaviour.

*** While idle

When doing absolutely nothing (not even resting), Unit chooses between

- Move to a random position in the game
- Do some work
- Rest until fully recovered


*** While moving

While currently moving towards something, the unit may choose to start sprinting
until exhausted.
