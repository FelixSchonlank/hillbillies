
* Position, name, attributes, HP & SP, orientation

Essentially just an exercise in getters, setters, and checkers in total,
nominal, and defensive programming. It is doable (though still a lot of work, 
don't get me wrong).


* advanceTime  							     :method:

: public void advanceTime(double deltaTime)

Unit is a finite state machine.

There are transition flags. In descending order of
importance, they are:
- shouldRest
- shouldWork
- shouldAttack
Whether the Unit should move is determined by the non-emptiness of at least one
of: immediateTarget and path.

There is also the sprinting flag: sprinting.

There are 7 states:
- NOTHING
- MOVING
- RESTING_INIT
- RESTING_HP
- RESTING_STAMINA
- WORKING
- ATTACKING

*Don't forget to check if deltaTime was maximally 0.2 seconds!*

** When in NOTHING

If there is an immediateTarget, go to MOVING. Set all flags to low.

ElseIf there is a path, put the first element in immediateTarget, remove that
element from the path, and go to MOVING. Set all flags to low.

ElseIf shouldRest is high, do transitionToRestingInit.

ElseIf shouldWork is high, do transitionToWorking.

ElseIf shouldAttack is high, do transitionToAttacking.

ElseIf defaultBehaviour is high, choose a random option from
- Ordering yourself to move to a random position in the game
- Ordering yourself to work by setting the shouldWork flag high
- Ordering yourself to rest by setting the shouldRest flag high

(If defaultBehaviour is low, do nothing and remain in this state.)


** When in MOVING

If reachedImmediateTarget() && !path.isEmpty(), set Unit position to center of
immediateTarget. Place next element of path in the immediateTarget.

ElseIf reachedImmediateTarget() && path.isEmpty(), set Unit position to center of
immediateTarget. Do transitionToNothing.

ElseIf !reachedImmediateTarget(), update position as explained in pdf. The x'
from the pdf is the x value of immediateTarget; the x is the x value of
position; the v can be calculated from the attributes, the sprinting flag, and
the difference between the current position and the immediateTarget; the new
position can be calculated from v and the given deltaTime. Don't forget to lower
the stamina by 1 if sprintingStaminaDecreaseCountdown reaches 0. In that case,
reset the countdown to its top value (0.1 s) minus the negative overshoot. Also,
if the stamina itself reaches zero, set the sprinting flag to low.


** When in RESTING_INIT

If restingInitialCountdown > 0, decrease it with deltaTime.

Else, do transitionToRestingHP.


** When in RESTING_HP

If shouldWork is high, do transitionToWorking.

ElseIf shouldAttack is high, do transitionToAttacking.

ElseIf HP is full, do transitionToRestingStamina.

Else(If HP is not full), decrease restingHPCountdown by deltaTime. If it reaches
0 this way, add 1 HP to the total and reset the countdown to its top value,
minus the negative overshoot.


** When in RESTING_STAMINA

If shouldWork is high, do transitionToWorking.

ElseIf shouldAttack is high, do transitionToAttacking.

ElseIf HP is full, do transitionToRestingHP.

ElseIf stamina is full, do transitionToNothing.

Else(If stamina is not full), decrease restingStaminaCountdown by deltaAtime. If
it reaches 0 this way, add 1 stamina to the total and reset the countdown to its
top value, minus the negative overshoot.


** When in WORKING

If shouldRest is high, do transitionToRestingInit.

ElseIf shouldAttack is high, do transitionToAttacking.

ElseIf workingCountdown <= 0, do transitionToNothing.

Else(If workingCountdown > 0), decrease workingCountdown by deltaTime.


** When in ATTACKING

If attackingCountdown is > 0, decrease attackingCountdown by deltaTime.

ElseIf inRangeForAttack(victim), call the defend method on the victim, and pass
this Unit to give the needed information. Do transitionToNothing.

Else(If !inRangeForAttack(victim)), do transitionToNothing.


* Movement

** moveToAdjacent  						     :method:

: public void moveToAdjacent(CubeLocation destination)

Only if in allowing state: NOTHING, RESTING_HP, RESTING_STAMINA, WORKING:
immediateTarget is set to destination.


** moveTo  							     :method:

: public void moveTo(CubeLocation destination)

Only if in allowing state: NOTHING, RESTING_HP, RESTING_STAMINA, WORKING:
path is set to an ArrayList of consecutive (opeenvolgende) CubeLocations to be
followed cube by cube.


* Combat

** attack 							     :method:

: public void attack(Unit victim)

Only if in allowing state: NOTHING, RESTING_HP, RESTING_STAMINA, WORKING:
Set the shouldAttack flag high. There is an internal victim variable, which is
used later on, when actually attacking. Set the victim variable to passed
victim.


** defend 							     :method:

: public void defend(Unit attacker)

An instantaneous response to the attack. Everything is handled immediately:
dodging, blocking, damage taking, teleportation. The state of the defendant is
set to NOTHING using transitionToNothing, and this method is the only one to
break the FSM model. attacker is used to get information about damage done.


* rest 								     :method:

: public void rest()

Only if in allowing state: NOTHING, WORKING:
The shouldRest flag is set to high.


* work 								     :method:

: public void work()

Only if in allowing state: NOTHING, RESTING_HP, RESTING_STAMINA:
The shouldWork flag is set to high.


* Extra stuff

** Helper classes


** Helper variables

*** previousPosition

: private double[] previousPosition

Holds the previous position of the Unit. Very important to determine whether it
has reached its destination.


*** immediateTarget

: private double[] immediateTarget

The place that the Unit is currently going. 


*** path

: private List<double[]> path

A list of positions that the Unit should walk towards, in correct order.


*** sprintingStaminaDecreaseCountdown

: prviate float sprintingStaminaDecreaseCountdown

The time it will take before the next whole point of stamina is subtracted from
the Unit's stamina gauge.


*** restingInitialCountdown

: private float restingInitialCountdown

The time it will take before the initial resting period is over, and the Unit
transitions to a real RESTING_... state.


*** restingHPCountdown

: private float restingHPCountdown

The time it will take before the next whole point of HP is restored by resting.


*** restingStaminaCountdown

: private float restingStaminaCountdown

The time it will take before the next whole point of stamina is restored by
resting.


*** workingCountdown

: private float workingCountdown

The time it will take before the work is done.


*** attackingCountdown

: private float attackingCountdown

The time it will take before the attack is actually carried out.


*** victim

: private Unit victim

The unit that will be attacked once the attackingCountdown is done.


** Helper methods

*** transitionToNothing

: private void transitionToNothing()

Set state to NOTHING. Set all flags to low.


*** transitionToRestingInit

: private void transitionToRestingInit()

Set state to RESTING_INIT. Set restingInitialCountdown to the time it would take
to restore 1 HP (see pdf or preliminary). Set all flags to low.


*** transitionToRestingHP

: private void transitionToRestingHP()

Set state to RESTING_HP. Set restingHPCountdown to the time it will take to
restore 1 HP (see pdf or preliminary). Set all flags to low.


*** transitionToRestingStamina

: private void transitionToRestingStamina()

Set state to RESTING_STAMINA. Set restingStaminaCountdown to the time it will
take to restore 1 stamina (see pdf or preliminary). Set all flags to low.


*** transitionToWorking

: private void transitionToWorking()

Set state to WORKING. Set workingCountdown to the time it takes to complete the
work (see pdf or preliminary.org). Set all flags to low.


*** transitionToAttacking

: private void transitionToAttacking()

Set state to ATTACKING. Set attackingCountdown to the time it takes until you
can attack (see pdf or preliminary.org). Set all flags to low.
DONE

*** reachedImmediateTarget

: private boolean reachedImmediateTarget()

Checks whether the Unit has reached the immediateTarget, by overshooting it by
some distance.

: if (between(x_immediateTarget, x_prev, x_cur) ||
:     between(y_immediateTarget, y_prev, y_cur) ||
:     between(z_immediateTarget, z_prev, z_cur)
:     )
:     return true;


*** inRangeForAttack

: private boolean inRangeForAttack(Unit victim)

Checks whether the victim is in range for the attack (in the same or an adjacent
cube).  DONE
